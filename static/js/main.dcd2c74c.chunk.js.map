{"version":3,"sources":["config.js","components/Input.js","components/LocalStorageInput.js","hooks/useLocalStorage.js","components/ScreenCapture.js","components/Count.js","util.js","hooks/useSquatCounter.js","hooks/usePullUpCounter.js","hooks/useHangingLegRaiseCounter.js","hooks/useOnEstimate.js","App.js","hooks/useInput.js","serviceWorker.js","index.js"],"names":["modelConfig","architecture","inferenceConfig","decodingMethod","label","value","onChange","Form","Group","as","Row","className","Label","column","sm","Col","Control","type","placeholder","localStorageKey","useState","localStorage","getItem","setValue","e","target","setItem","useLocalStorage","slugify","lower","Input","a","setCaptureInput","videoRef","navigator","mediaDevices","getDisplayMedia","stream","video","current","srcObject","onloadedmetadata","play","console","error","intervalID","width","height","useRef","playsInline","ref","style","Button","onClick","startCapture","influxdbURL","influx","writePoints","Influx","InfluxDB","err","writeCount","measurement","count","fields","allZeroCount","Object","values","every","v","Date","startTime","setStartTime","elapsedTime","setElapsedTime","useEffect","clearInterval","setInterval","elapsed","Math","round","keys","map","key","replace","match","toLowerCase","reducer","action","useOnEstimate","sensitivity","useReducer","dispatch","standard","checkPose","useCallback","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","elbow","shoulder","y","max","hip","wrist","usePullUpCounter","pullUpCount","checkPullUpPose","upRef","checkPoses","leftAnkle","rightAnkle","ankle","abs","useHangingLegRaiseCounter","legRaiseCount","checkLegRaisePose","downRef","leftEar","rightEar","leftKnee","rightKnee","knee","x","useSquatCounter","squatCount","checkSquatPose","poses","length","keyPointObject","keypoints","reduce","acc","part","position","App","videoElement","captureInput","input","useMemo","camURL","image","Image","src","crossOrigin","onEstimate","facingMode","frameRate","minPartConfidence","Count","ScreenCapture","LocalStorageInput","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcd2c74c.chunk.js","sourcesContent":["export const modelConfig = {\n  architecture: \"MobileNetV1\"\n}\n\nexport const inferenceConfig = {\n  decodingMethod: \"single-person\"\n}\n","import React from \"react\"\nimport { Row, Col, Form } from \"react-bootstrap\"\n\nexport default function({ label, value, onChange }) {\n  return (\n    <Form>\n      <Form.Group as={Row} className=\"d-flex\">\n        <Form.Label column sm=\"2\">\n          {label}\n        </Form.Label>\n        <Col sm=\"10\">\n          <Form.Control\n            type=\"text\"\n            placeholder={`Enter ${label}`}\n            value={value}\n            onChange={onChange}\n          />\n        </Col>\n      </Form.Group>\n    </Form>\n  )\n}\n","import React from \"react\"\nimport slugify from \"slugify\"\nimport Input from \"./Input\"\nimport useLocalStorage from \"../hooks/useLocalStorage\"\n\nexport default function({ label }) {\n  const [value, onChange] = useLocalStorage(slugify(label, { lower: true }))\n  return <Input label={label} value={value} onChange={onChange} />\n}\n","import { useState } from \"react\"\n\nexport default function useLocalStorage(localStorageKey) {\n  const [value, setValue] = useState(\n    localStorage.getItem(localStorageKey) || \"\"\n  )\n  function onChange(e) {\n    setValue(e.target.value)\n    localStorage.setItem(localStorageKey, e.target.value)\n  }\n  return [value, onChange]\n}\n","import React, { useRef } from \"react\"\nimport { Button } from \"react-bootstrap\"\n\nasync function startCapture({ setCaptureInput, videoRef }) {\n  try {\n    const stream = await navigator.mediaDevices.getDisplayMedia()\n    const video = videoRef.current\n    video.srcObject = stream\n    video.onloadedmetadata = () => {\n      video.play()\n      setCaptureInput(video)\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(`Error: ${err}`)\n  }\n}\n\nexport default function({ setCaptureInput, width = 600, height = 500 }) {\n  const videoRef = useRef()\n  return (\n    <>\n      <video\n        playsInline\n        ref={videoRef}\n        style={{ width: \"0\", height: \"0\" }}\n        width={width}\n        height={height}\n      />\n      <div>\n        <Button onClick={() => startCapture({ setCaptureInput, videoRef })}>\n          Use screen display\n        </Button>\n      </div>\n    </>\n  )\n}\n","import React, { useState, useEffect } from \"react\"\nimport { writeCount } from \"../util\"\n\nlet intervalID\n\nexport default function({ count = {} }) {\n  const allZeroCount = Object.values(count).every(v => v === 0)\n  const [startTime, setStartTime] = useState(new Date())\n  const [elapsedTime, setElapsedTime] = useState()\n  useEffect(() => {\n    setStartTime(new Date())\n    writeCount(\"elapsed\", 1)\n  }, [allZeroCount])\n  useEffect(() => {\n    clearInterval(intervalID)\n    intervalID = setInterval(() => {\n      const elapsed = Math.round((new Date() - startTime) / 1000)\n      setElapsedTime(elapsed)\n    }, 1000)\n  }, [startTime])\n  return (\n    <div>\n      {Object.keys(count).map(key => {\n        return (\n          <h1 key={key}>\n            {key.replace(\"use\", \"\").replace(/[A-Z]/g, match => {\n              return ` ${match.toLowerCase()}`\n            })}\n            : {count[key]}\n          </h1>\n        )\n      })}\n      <h1>elapsed: {elapsedTime}</h1>\n    </div>\n  )\n}\n","import Influx from \"influx\"\nimport dayjs from \"dayjs\"\n\nconst influxdbURL = localStorage.getItem(\"influxdb-url\")\nlet influx = { writePoints: () => {} }\ntry {\n  influx = new Influx.InfluxDB(influxdbURL)\n} catch (err) {\n  // eslint-disable-next-line no-console\n  console.error(err)\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport function writeCount(measurement, count) {\n  try {\n    influx.writePoints([\n      {\n        fields: { count },\n        measurement\n      }\n    ])\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e)\n  }\n}\n\nexport function setReloadTimeout(now = dayjs(), hour = 6) {\n  const reloadTime = now.set(\"hour\", hour)\n  let delay = reloadTime.diff(now, \"millisecond\")\n  if (delay < 0) {\n    delay += 86400 * 1000\n  }\n  setTimeout(() => {\n    window.location.reload()\n  }, delay)\n}\n","import { useRef, useReducer, useCallback } from \"react\"\nimport { writeCount } from \"../util\"\n\nfunction reducer(count, action) {\n  if (action === \"increment\") {\n    writeCount(\"squat_notification\", count + 1)\n    return count + 1\n  }\n  if (\"reset\" && count > 1) {\n    writeCount(\"squat\", count)\n    return 0\n  }\n  return 0\n}\n\nexport default function(sensitivity = 100) {\n  const [count, dispatch] = useReducer(reducer, 0)\n  const downRef = useRef(0)\n  const checkPoses = useCallback(\n    ({ leftEar, rightEar, leftKnee, rightKnee, leftHip, rightHip }) => {\n      let hip = leftHip\n      let knee = leftKnee\n      if (!hip || !knee) {\n        hip = rightHip\n        knee = rightKnee\n      }\n      if (!hip || !knee) {\n        return\n      }\n      const distance = Math.abs(hip.x - knee.x)\n      if (distance > sensitivity) {\n        downRef.current += 1\n        return\n      }\n      if (downRef.current > 5) {\n        dispatch(\"increment\")\n        downRef.current = 0\n        return\n      }\n      const rest = leftEar && rightEar\n      if (rest) {\n        dispatch(\"reset\")\n      }\n    },\n    [sensitivity]\n  )\n  return [count, checkPoses]\n}\n","import { useRef, useReducer, useCallback } from \"react\"\nimport { writeCount } from \"../util\"\n\nfunction reducer(count, action) {\n  if (action === \"increment\") {\n    writeCount(\"pull_up_notification\", count + 1)\n    return count + 1\n  }\n  if (\"reset\" && count > 1) {\n    writeCount(\"pull_up\", count)\n    return 0\n  }\n  return 0\n}\n\nexport default function(sensitivity = 1) {\n  const [count, dispatch] = useReducer(reducer, 0)\n  const standard = useRef(0)\n  const checkPose = useCallback(\n    ({\n      leftShoulder,\n      rightShoulder,\n      leftElbow,\n      rightElbow,\n      leftWrist,\n      rightWrist,\n      leftHip,\n      rightHip\n    }) => {\n      const elbow = leftElbow || rightElbow\n      const shoulder = leftShoulder || rightShoulder\n      if (!elbow || !shoulder) {\n        return\n      }\n\n      const down = shoulder.y > elbow.y\n      if (down) {\n        standard.current = Math.max(standard.current, elbow.y)\n        return\n      }\n\n      const up = standard.current > elbow.y + sensitivity\n      if (up) {\n        dispatch(\"increment\")\n        standard.current = 0\n        return\n      }\n\n      const hip = leftHip || rightHip\n      const wrist = leftWrist || rightWrist\n      if (!hip || !wrist) {\n        return\n      }\n      const rest = wrist.y + sensitivity > hip.y\n      if (rest) {\n        dispatch(\"reset\")\n      }\n    },\n    [sensitivity]\n  )\n  return [count, checkPose]\n}\n","import { useRef, useReducer, useCallback } from \"react\"\nimport { writeCount } from \"../util\"\n\nfunction reducer(count, action) {\n  if (action === \"increment\") {\n    writeCount(\"leg_raise_notification\", count + 1)\n    return count + 1\n  }\n  if (\"reset\" && count > 1) {\n    writeCount(\"leg_raise\", count)\n    return 0\n  }\n  return 0\n}\n\nexport default function(sensitivity = 220) {\n  const [count, dispatch] = useReducer(reducer, 0)\n  const upRef = useRef(0)\n  const checkPoses = useCallback(\n    ({\n      leftWrist,\n      rightWrist,\n      leftAnkle,\n      rightAnkle,\n      leftShoulder,\n      rightShoulder,\n      leftHip,\n      rightHip\n    }) => {\n      const ankle = leftAnkle || rightAnkle\n      const shoulder = leftShoulder || rightShoulder\n      if (!ankle || !shoulder) {\n        return\n      }\n      const distance = Math.abs(ankle.y - shoulder.y)\n      if (distance < sensitivity) {\n        upRef.current += 1\n        return\n      }\n      if (upRef.current > 10) {\n        dispatch(\"increment\")\n        upRef.current = 0\n        return\n      }\n      const hip = leftHip || rightHip\n      const wrist = leftWrist || rightWrist\n      if (!hip || !wrist) {\n        return\n      }\n      const rest = wrist.y + sensitivity / 10 > hip.y\n      if (rest) {\n        dispatch(\"reset\")\n      }\n    },\n    [sensitivity]\n  )\n  return [count, checkPoses]\n}\n","import { useCallback } from \"react\"\nimport useSquatCounter from \"./useSquatCounter\"\nimport usePullUpCounter from \"./usePullUpCounter\"\nimport useHangingLegRaiseCounter from \"./useHangingLegRaiseCounter\"\n\nfunction getKeypointsObject(pose) {\n  return pose.keypoints.reduce((acc, { part, position }) => {\n    acc[part] = position\n    return acc\n  }, {})\n}\n\nexport default function useOnEstimate() {\n  const [pullUpCount, checkPullUpPose] = usePullUpCounter()\n  const [legRaiseCount, checkLegRaisePose] = useHangingLegRaiseCounter()\n  const [squatCount, checkSquatPose] = useSquatCounter()\n  const onEstimate = useCallback(\n    poses => {\n      if (poses.length !== 1) {\n        return\n      }\n      const keyPointObject = getKeypointsObject(poses[0])\n      checkPullUpPose(keyPointObject)\n      checkLegRaisePose(keyPointObject)\n      checkSquatPose(keyPointObject)\n    },\n    [checkLegRaisePose, checkPullUpPose, checkSquatPose]\n  )\n  return [{ squatCount, pullUpCount, legRaiseCount }, onEstimate]\n}\n","import \"regenerator-runtime/runtime\"\nimport React, { useState } from \"react\"\nimport PoseNet from \"react-posenet\"\nimport { modelConfig, inferenceConfig } from \"./config\"\nimport LocalStorageInput from \"./components/LocalStorageInput\"\nimport ScreenCapture from \"./components/ScreenCapture\"\nimport Count from \"./components/Count\"\nimport useInput from \"./hooks/useInput\"\n// import useReloadWhenError from \"./hooks/useReloadWhenError\"\nimport useOnEstimate from \"./hooks/useOnEstimate\"\n\nfunction App() {\n  // useReloadWhenError()\n  const [captureInput, setCaptureInput] = useState()\n  const input = useInput(captureInput)\n  const [count, onEstimate] = useOnEstimate()\n\n  return (\n    <>\n      <div className=\"d-flex\">\n        <PoseNet\n          input={input}\n          className=\"min-vh-100\"\n          facingMode=\"environment\"\n          frameRate={15}\n          onEstimate={onEstimate}\n          minPartConfidence={0.75}\n          modelConfig={modelConfig}\n          inferenceConfig={inferenceConfig}\n        />\n        <Count count={count} />\n      </div>\n      <ScreenCapture setCaptureInput={setCaptureInput} />\n      <div className=\"my-3\" />\n      <LocalStorageInput label=\"InfluxDB URL\" />\n      <LocalStorageInput label=\"CAM URL\" />\n    </>\n  )\n}\n\nexport default App\n","import { useMemo } from \"react\"\n\nexport default function useInput(videoElement) {\n  const input = useMemo(() => {\n    const camURL = localStorage.getItem(\"cam-url\")\n    if (camURL) {\n      const image = new Image()\n      image.src = camURL\n      image.crossOrigin = \"\"\n      return image\n    }\n    if (videoElement) {\n      return videoElement\n    }\n    return undefined\n  }, [videoElement])\n  return input\n}\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\n// import { setReloadTimeout } from \"./util\"\nimport * as serviceWorker from \"./serviceWorker\"\n\n// setReloadTimeout()\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}